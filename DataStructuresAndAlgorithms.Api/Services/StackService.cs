using DataStructures.Lib;
using System;
using System.Collections;

namespace DataStructuresAndAlgorithms.Api.Services
{
    public class StackService
    {
        public static void CompareSelfGeneratedStacks(Stack stack, MyStack myStack)
        {
            if (stack is null) throw new ArgumentNullException(nameof(stack), $"Parameter can not be null.");
            if (myStack is null) throw new ArgumentNullException(nameof(myStack), $"Parameter can not be null.");

            Console.WriteLine("ORIGINAL STACK");
            ConsoleWriteStackResults(stack);
            Console.WriteLine("*****************************");
            Console.WriteLine("CUSTOM STACK");
            ConsoleWriteStackResults(myStack);
        }

        public static void CompareAutoGeneratedStacks()
        {
            Console.WriteLine("ORIGINAL STACK");
            CreateStack(new Stack());
            Console.WriteLine("*****************************");
            Console.WriteLine("CUSTOM STACK");
            CreateStack(new MyStack());
        }

        private static void CreateStack(dynamic stack)
        {
            stack.Push(1);
            stack.Push("one");
            stack.Push(1.2358);
            Console.WriteLine($"PEEK: {stack.Peek()}");
            stack.Pop();
            stack.Pop();
            stack.Push("On Top");
            stack.Pop();
            stack.Pop();
            stack.Push(DateTime.Now);
            ConsoleWriteStackResults(stack);
        }

        private static void ConsoleWriteStackResults(dynamic stack)
        {
            foreach (var item in stack)
            {
                Console.WriteLine(item);
            }
        }
    }
}
